Starting game.
All tests passed for drawCard()
File 'dominion.c'
Lines executed:16.77% of 650
dominion.c:creating 'dominion.c.gcov'

Starting game.
All tests passed for numHandCards()
File 'dominion.c'
Lines executed:16.77% of 650
dominion.c:creating 'dominion.c.gcov'

Starting game.
All tests passed for isGameOver()
File 'dominion.c'
Lines executed:18.31% of 650
dominion.c:creating 'dominion.c.gcov'

Starting game.
All tests passed for whoseTurn()
File 'dominion.c'
Lines executed:22.31% of 650
dominion.c:creating 'dominion.c.gcov'

Starting game.
All tests passed for Smithy
File 'dominion.c'
Lines executed:20.62% of 650
dominion.c:creating 'dominion.c.gcov'

Starting game.
All tests passed for Village
File 'dominion.c'
Lines executed:20.46% of 650
dominion.c:creating 'dominion.c.gcov'

Starting game.
All tests passed for Steward
File 'dominion.c'
Lines executed:21.38% of 650
dominion.c:creating 'dominion.c.gcov'

Starting game.
TEST FAILED:
Council Room drew wrong number of cards
File 'dominion.c'
Lines executed:20.46% of 650
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:int compare(const void* a, const void* b) {
       28:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
       28:   13:  if (*(int*)a < *(int*)b)
       10:   14:    return -1;
       18:   15:  return 0;
       28:   16:}
        -:   17:
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:
        -:   49:  //check number of players
        2:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       22:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
      220:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
      190:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
      100:   67:        }
       10:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        1:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        1:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       42:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
      330:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       20:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
        1:  117:		  if (numPlayers == 2){
        1:  118:		    state->supplyCount[i] = 8;
        1:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        1:  121:		}
        -:  122:	      else
        -:  123:		{
        9:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
      145:  132:	}
        -:  133:
       20:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        6:  140:  for (i = 0; i < numPlayers; i++) {
        2:  141:    state->deckCount[i] = 0;
       16:  142:    for (j = 0; j < 3; j++) {
        6:  143:  	  state->deck[i][j] = estate;
        6:  144:  	  state->deckCount[i]++;
        6:  145:  	}
       32:  146:    for (j = 3; j < 10; j++) {
       14:  147:  	  state->deck[i][j] = copper;
       14:  148:  	  state->deckCount[i]++;
       14:  149:  	}
        2:  150:  }
        -:  151:
        -:  152:  //shuffle player decks
        6:  153:  for (i = 0; i < numPlayers; i++) {
        2:  154:    if ( shuffle(i, state) < 0 ) {
    #####:  155:	     return -1;
        -:  156:	  }
        2:  157:  }
        -:  158:
        -:  159:  //draw player hands
        6:  160:  for (i = 0; i < numPlayers; i++) {
        -:  161:    //initialize hand size to zero
        2:  162:    state->handCount[i] = 0;
        2:  163:    state->discardCount[i] = 0;
        -:  164:    //draw 5 cards
        -:  165:    // for (j = 0; j < 5; j++)
        -:  166:    //	{
        -:  167:    //	  drawCard(i, state);
        -:  168:    //	}
        2:  169:  }
        -:  170:
        -:  171:  //set embargo tokens to 0 for all supply piles
       56:  172:  for (i = 0; i <= treasure_map; i++) {
       27:  173:      state->embargoTokens[i] = 0;
       27:  174:  }
        -:  175:
        -:  176:  //initialize first player's turn
        1:  177:  state->outpostPlayed = 0;
        1:  178:  state->phase = 0;
        1:  179:  state->numActions = 1;
        1:  180:  state->numBuys = 1;
        1:  181:  state->playedCardCount = 0;
        1:  182:  state->whoseTurn = 0;
        1:  183:  state->handCount[state->whoseTurn] = 0;
        -:  184:  //int it; move to top
        -:  185:
        -:  186:  //Moved draw cards to here, only drawing at the start of a turn
       12:  187:  for (it = 0; it < 5; it++) {
        5:  188:    drawCard(state->whoseTurn, state);
        5:  189:  }
        -:  190:
        1:  191:  updateCoins(state->whoseTurn, state, 0);
        -:  192:
        1:  193:  return 0;
        1:  194:}
        -:  195:
        -:  196:int shuffle(int player, struct gameState *state) {
        -:  197:
        -:  198:  int newDeck[MAX_DECK];
        2:  199:  int newDeckPos = 0;
        -:  200:  int card;
        -:  201:  int i;
        -:  202:
        2:  203:  if (state->deckCount[player] < 1)
    #####:  204:    return -1;
        2:  205:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  206:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  207:
       44:  208:  while (state->deckCount[player] > 0) {
       20:  209:    card = floor(Random() * state->deckCount[player]);
       20:  210:    newDeck[newDeckPos] = state->deck[player][card];
       20:  211:    newDeckPos++;
      134:  212:    for (i = card; i < state->deckCount[player]-1; i++) {
       47:  213:      state->deck[player][i] = state->deck[player][i+1];
       47:  214:    }
       20:  215:    state->deckCount[player]--;
        -:  216:  }
       44:  217:  for (i = 0; i < newDeckPos; i++) {
       20:  218:    state->deck[player][i] = newDeck[i];
       20:  219:    state->deckCount[player]++;
       20:  220:  }
        -:  221:
        2:  222:  return 0;
        2:  223:}
        -:  224:
        -:  225:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  226:{
        -:  227:  int card;
    #####:  228:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  229:
        -:  230:  //check if it is the right phase
    #####:  231:  if (state->phase != 0)
        -:  232:    {
    #####:  233:      return -1;
        -:  234:    }
        -:  235:
        -:  236:  //check if player has enough actions
    #####:  237:  if ( state->numActions < 1 )
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //get card played
    #####:  243:  card = handCard(handPos, state);
        -:  244:
        -:  245:  //check if selected card is an action
    #####:  246:  if ( card < adventurer || card > treasure_map )
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:
        -:  251:  //play card
    #####:  252:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //reduce number of actions
    #####:  258:  state->numActions--;
        -:  259:
        -:  260:  //update coins (Treasure cards may be added with card draws)
    #####:  261:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  262:
    #####:  263:  return 0;
    #####:  264:}
        -:  265:
        -:  266:int buyCard(int supplyPos, struct gameState *state) {
        -:  267:  int who;
        -:  268:  if (DEBUG){
        -:  269:    printf("Entering buyCard...\n");
        -:  270:  }
        -:  271:
        -:  272:  // I don't know what to do about the phase thing.
        -:  273:
    #####:  274:  who = state->whoseTurn;
        -:  275:
    #####:  276:  if (state->numBuys < 1){
        -:  277:    if (DEBUG)
        -:  278:      printf("You do not have any buys left\n");
    #####:  279:    return -1;
    #####:  280:  } else if (supplyCount(supplyPos, state) <1){
        -:  281:    if (DEBUG)
        -:  282:      printf("There are not any of that type of card left\n");
    #####:  283:    return -1;
    #####:  284:  } else if (state->coins < getCost(supplyPos)){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  287:    return -1;
        -:  288:  } else {
    #####:  289:    state->phase=1;
        -:  290:    //state->supplyCount[supplyPos]--;
    #####:  291:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  292:
    #####:  293:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  294:    state->numBuys--;
        -:  295:    if (DEBUG)
        -:  296:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  297:  }
        -:  298:
        -:  299:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  300:  //state->discardCount[who]++;
        -:  301:
    #####:  302:  return 0;
    #####:  303:}
        -:  304:
        -:  305:int numHandCards(struct gameState *state) {
        2:  306:  return state->handCount[ whoseTurn(state) ];
        -:  307:}
        -:  308:
        -:  309:int handCard(int handPos, struct gameState *state) {
    #####:  310:  int currentPlayer = whoseTurn(state);
    #####:  311:  return state->hand[currentPlayer][handPos];
        -:  312:}
        -:  313:
        -:  314:int supplyCount(int card, struct gameState *state) {
    #####:  315:  return state->supplyCount[card];
        -:  316:}
        -:  317:
        -:  318:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  319:  int i;
    #####:  320:  int count = 0;
        -:  321:
    #####:  322:  for (i = 0; i < state->deckCount[player]; i++) {
    #####:  323:      if (state->deck[player][i] == card) count++;
    #####:  324:  }
        -:  325:
    #####:  326:  for (i = 0; i < state->handCount[player]; i++) {
    #####:  327:      if (state->hand[player][i] == card) count++;
    #####:  328:  }
        -:  329:
    #####:  330:  for (i = 0; i < state->discardCount[player]; i++) {
    #####:  331:      if (state->discard[player][i] == card) count++;
    #####:  332:  }
        -:  333:
    #####:  334:  return count;
        -:  335:}
        -:  336:
        -:  337:int whoseTurn(struct gameState *state) {
        3:  338:  return state->whoseTurn;
        -:  339:}
        -:  340:
        -:  341:int endTurn(struct gameState *state) {
        -:  342:  int k;
        -:  343:  int i;
    #####:  344:  int currentPlayer = whoseTurn(state);
        -:  345:
        -:  346:  //Discard hand
    #####:  347:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  348:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  349:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  350:  }
    #####:  351:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  352:
        -:  353:  //Code for determining the player
    #####:  354:  if (currentPlayer < (state->numPlayers - 1)) {
    #####:  355:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  356:  }
        -:  357:  else {
    #####:  358:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  359:  }
        -:  360:
    #####:  361:  state->outpostPlayed = 0;
    #####:  362:  state->phase = 0;
    #####:  363:  state->numActions = 1;
    #####:  364:  state->coins = 0;
    #####:  365:  state->numBuys = 1;
    #####:  366:  state->playedCardCount = 0;
    #####:  367:  state->handCount[state->whoseTurn] = 0;
        -:  368:
        -:  369:  //int k; move to top
        -:  370:  //Next player draws hand
    #####:  371:  for (k = 0; k < 5; k++){
    #####:  372:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  373:  }
        -:  374:
        -:  375:  //Update money
    #####:  376:  updateCoins(state->whoseTurn, state , 0);
        -:  377:
    #####:  378:  return 0;
        -:  379:}
        -:  380:
        -:  381:int isGameOver(struct gameState *state) {
        -:  382:  int i;
        -:  383:  int j;
        -:  384:
        -:  385:  //if stack of Province cards is empty, the game ends
    #####:  386:  if (state->supplyCount[province] == 0)
        -:  387:    {
    #####:  388:      return 1;
        -:  389:    }
        -:  390:
        -:  391:  //if three supply pile are at 0, the game ends
    #####:  392:  j = 0;
    #####:  393:  for (i = 0; i < 25; i++) {
    #####:  394:      if (state->supplyCount[i] == 0) {
    #####:  395:	       j++;
    #####:  396:	    }
    #####:  397:  }
    #####:  398:  if ( j >= 3) {
    #####:  399:      return 1;
        -:  400:  }
        -:  401:
    #####:  402:  return 0;
    #####:  403:}
        -:  404:
        -:  405:int scoreFor (int player, struct gameState *state) {
        -:  406:
        -:  407:  int i;
    #####:  408:  int score = 0;
        -:  409:  //score from hand
    #####:  410:  for (i = 0; i < state->handCount[player]; i++)
        -:  411:    {
    #####:  412:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  413:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  414:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  415:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  416:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  417:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  418:    }
        -:  419:
        -:  420:  //score from discard
    #####:  421:  for (i = 0; i < state->discardCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  429:    }
        -:  430:
        -:  431:  //score from deck
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:    {
    #####:  434:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  435:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  436:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  437:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  438:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  439:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  440:    }
        -:  441:
    #####:  442:  return score;
        -:  443:}
        -:  444:
        -:  445:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  446:  int i;
        -:  447:  int j;
        -:  448:  int highScore;
        -:  449:  int currentPlayer;
        -:  450:
        -:  451:  //get score for each player
    #####:  452:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  453:    {
        -:  454:      //set unused player scores to -9999
    #####:  455:      if (i >= state->numPlayers)
        -:  456:	{
    #####:  457:	  players[i] = -9999;
    #####:  458:	}
        -:  459:      else
        -:  460:	{
    #####:  461:	  players[i] = scoreFor (i, state);
        -:  462:	}
    #####:  463:    }
        -:  464:
        -:  465:  //find highest score
    #####:  466:  j = 0;
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  468:    {
    #####:  469:      if (players[i] > players[j])
        -:  470:	{
    #####:  471:	  j = i;
    #####:  472:	}
    #####:  473:    }
    #####:  474:  highScore = players[j];
        -:  475:
        -:  476:  //add 1 to players who had less turns
    #####:  477:  currentPlayer = whoseTurn(state);
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
    #####:  480:      if ( players[i] == highScore && i > currentPlayer )
        -:  481:	{
    #####:  482:	  players[i]++;
    #####:  483:	}
    #####:  484:    }
        -:  485:
        -:  486:  //find new highest score
    #####:  487:  j = 0;
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  489:    {
    #####:  490:      if ( players[i] > players[j] )
        -:  491:	{
    #####:  492:	  j = i;
    #####:  493:	}
    #####:  494:    }
    #####:  495:  highScore = players[j];
        -:  496:
        -:  497:  //set winners in array to 1 and rest to 0
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
    #####:  500:      if ( players[i] == highScore )
        -:  501:	{
    #####:  502:	  players[i] = 1;
    #####:  503:	}
        -:  504:      else
        -:  505:	{
    #####:  506:	  players[i] = 0;
        -:  507:	}
    #####:  508:    }
        -:  509:
    #####:  510:  return 0;
        -:  511:}
        -:  512:
        -:  513:int drawCard(int player, struct gameState *state) {
        -:  514:  int count, deckCounter;
        -:  515:
        -:  516:  //Deck is empty
        6:  517:  if (state->deckCount[player] <= 0) {
        -:  518:    //Step 1 Shuffle the discard pile back into a deck
        -:  519:    int i;
        -:  520:    //Move discard to deck
    #####:  521:    for (i = 0; i < state->discardCount[player];i++) {
    #####:  522:      state->deck[player][i] = state->discard[player][i];
    #####:  523:      state->discard[player][i] = -1;
    #####:  524:    }
        -:  525:
    #####:  526:    state->deckCount[player] = state->discardCount[player];
    #####:  527:    state->discardCount[player] = 0; //Reset discard
        -:  528:
        -:  529:    //Shufffle the deck
    #####:  530:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  531:
        -:  532:    if (DEBUG) {//Debug statements
        -:  533:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  534:    }
        -:  535:
    #####:  536:    state->discardCount[player] = 0;
        -:  537:
        -:  538:    //Step 2 Draw Card
    #####:  539:    count = state->handCount[player];//Get current player's hand count
        -:  540:
        -:  541:    if (DEBUG) {//Debug statements
        -:  542:      printf("Current hand count: %d\n", count);
        -:  543:    }
        -:  544:
    #####:  545:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  546:
    #####:  547:    if (deckCounter == 0)
    #####:  548:      return -1;
        -:  549:
    #####:  550:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  551:    state->deckCount[player]--;
    #####:  552:    state->handCount[player]++;//Increment hand count
    #####:  553:  }
        -:  554:
        -:  555:  //Deck isn't empty
        -:  556:  else {
        6:  557:    int count = state->handCount[player];//Get current hand count for player
        -:  558:    //int deckCounter;
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:
        6:  563:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  565:    state->deckCount[player]--;
        6:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        6:  569:  return 0;
        6:  570:}
        -:  571:
        -:  572:int getCost(int cardNumber)
        -:  573:{
    #####:  574:  switch( cardNumber )
        -:  575:    {
        -:  576:    case curse:
    #####:  577:      return 0;
        -:  578:    case estate:
    #####:  579:      return 2;
        -:  580:    case duchy:
    #####:  581:      return 5;
        -:  582:    case province:
    #####:  583:      return 8;
        -:  584:    case copper:
    #####:  585:      return 0;
        -:  586:    case silver:
    #####:  587:      return 3;
        -:  588:    case gold:
    #####:  589:      return 6;
        -:  590:    case adventurer:
    #####:  591:      return 6;
        -:  592:    case council_room:
    #####:  593:      return 5;
        -:  594:    case feast:
    #####:  595:      return 4;
        -:  596:    case gardens:
    #####:  597:      return 4;
        -:  598:    case mine:
    #####:  599:      return 5;
        -:  600:    case remodel:
    #####:  601:      return 4;
        -:  602:    case smithy:
    #####:  603:      return 4;
        -:  604:    case village:
    #####:  605:      return 3;
        -:  606:    case baron:
    #####:  607:      return 4;
        -:  608:    case great_hall:
    #####:  609:      return 3;
        -:  610:    case minion:
    #####:  611:      return 5;
        -:  612:    case steward:
    #####:  613:      return 3;
        -:  614:    case tribute:
    #####:  615:      return 5;
        -:  616:    case ambassador:
    #####:  617:      return 3;
        -:  618:    case cutpurse:
    #####:  619:      return 4;
        -:  620:    case embargo:
    #####:  621:      return 2;
        -:  622:    case outpost:
    #####:  623:      return 5;
        -:  624:    case salvager:
    #####:  625:      return 4;
        -:  626:    case sea_hag:
    #####:  627:      return 4;
        -:  628:    case treasure_map:
    #####:  629:      return 4;
        -:  630:    }
        -:  631:
    #####:  632:  return -1;
    #####:  633:}
        -:  634:
        -:  635://
        -:  636://Cards implemented as functions
        -:  637://
        -:  638:
        -:  639://Village
        -:  640:int village_card(int current_player, struct gameState *game_state, int hand_position) {
        -:  641:  //Discard Village from hand
        1:  642:  discardCard(hand_position, current_player, game_state, 0);
        -:  643:
        -:  644:  //+1 Card
        1:  645:  drawCard(current_player, game_state);
        -:  646:
        -:  647:  //+2 Actions
        1:  648:  game_state->numActions += 1;
        -:  649:
        -:  650:
        1:  651:  return 0;
        -:  652:}
        -:  653:
        -:  654://Great Hall
        -:  655:int great_hall_card(int current_player, struct gameState *game_state, int hand_position){
        -:  656:       //+1 Card
    #####:  657:      drawCard(current_player, game_state);
        -:  658:
        -:  659:      //+1 Action
    #####:  660:      game_state->numActions++;
        -:  661:
        -:  662:      //Discard Great Hall from hand
    #####:  663:      discardCard(hand_position, current_player, game_state, 0);
        -:  664:
    #####:  665:      return 0;
        -:  666:}
        -:  667:
        -:  668://Smithy
        -:  669:int smithy_card(int current_player, struct gameState *game_state, int hand_position) {
        -:  670:  //+3 Cards
    #####:  671:  drawCard(current_player, game_state);
    #####:  672:  drawCard(current_player, game_state);
    #####:  673:  drawCard(current_player, game_state);
        -:  674:
        -:  675:  //Discard Smithy from hand
    #####:  676:  discardCard(hand_position, current_player, game_state, 0);
        -:  677:
    #####:  678:  return 0;
        -:  679:}
        -:  680:
        -:  681://Remodel
        -:  682:int remodel_card(int current_player, struct gameState *game_state, int hand_position) {
    #####:  683:  int choice1 = 1;
    #####:  684:  int choice2 = 2;
    #####:  685:  int j = game_state->hand[current_player][choice1];  //store card we will trash
        -:  686:  int i;
        -:  687:
    #####:  688:  if ((getCost(game_state->hand[current_player][choice1]) + 2) > getCost(choice2)) {
    #####:  689:    return 0;
        -:  690:  }
        -:  691:
    #####:  692:  gainCard(choice2, game_state, 0, current_player+1);
        -:  693:
        -:  694:  //discard card from hand
    #####:  695:  discardCard(hand_position, current_player, game_state, 0);
        -:  696:
        -:  697:  //Replace discarded card
    #####:  698:  drawCard(current_player, game_state);
        -:  699:
        -:  700:  //Discard trashed card
    #####:  701:  for (i = 1; i < game_state->handCount[current_player]; i+=2) {
    #####:  702:    if (game_state->hand[current_player][i] == j) {
    #####:  703:      discardCard(i, current_player, game_state, 1);
    #####:  704:      break;
        -:  705:    }
    #####:  706:  }
    #####:  707:  return 0;
    #####:  708:}
        -:  709:
        -:  710://Outpost
        -:  711:int outpost_card(int current_player, struct gameState *game_state, int hand_position) {
        -:  712:  //set outpost flag
    #####:  713:  game_state->outpostPlayed = hand_position;
        -:  714:
        -:  715:  //Discard card
    #####:  716:  discardCard(hand_position, current_player, game_state, -1);
        -:  717:
        -:  718:  //Replace discarded card
    #####:  719:  drawCard(current_player, game_state);
        -:  720:
    #####:  721:  return 1;
        -:  722:}
        -:  723:
        -:  724:
        -:  725:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  726:{
        -:  727:  int i;
        -:  728:  int j;
        -:  729:  int k;
        -:  730:  int x;
        -:  731:  int index;
        1:  732:  int currentPlayer = whoseTurn(state);
        1:  733:  int nextPlayer = currentPlayer + 1;
        -:  734:
        1:  735:  int tributeRevealedCards[2] = {-1, -1};
        -:  736:  int temphand[MAX_HAND];// moved above the if statement
        1:  737:  int drawntreasure = 0;
        -:  738:  int cardDrawn;
        1:  739:  int z = 0;// this is the counter for the temp hand
        1:  740:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  741:    nextPlayer = 0;
    #####:  742:  }
        -:  743:
        -:  744:
        -:  745:  //uses switch to select card and perform actions
        1:  746:  switch (card) {
        -:  747:    case adventurer:
    #####:  748:      while (drawntreasure < 2) {
    #####:  749:        if (state->deckCount[currentPlayer] < 1) {
        -:  750:          //if the deck is empty we need to shuffle discard and add to deck
    #####:  751:          shuffle(currentPlayer, state);
    #####:  752:        }
    #####:  753:        drawCard(currentPlayer, state);
    #####:  754:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:  755:
        -:  756:        //top card of hand is most recently drawn card.
    #####:  757:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####:  758:          drawntreasure++;
    #####:  759:        }
        -:  760:        else {
    #####:  761:          temphand[z] = cardDrawn;
    #####:  762:          state->handCount[currentPlayer]--;
        -:  763:          //this should just remove the top card (the most recently drawn one).
    #####:  764:          z++;
        -:  765:        }
        -:  766:      }
    #####:  767:      while (z - 1 >= 0) {
    #####:  768:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
        -:  769:        // discard all cards in play that have been drawn
    #####:  770:        z = z - 1;
        -:  771:      }
    #####:  772:      return 0;
        -:  773:
        -:  774:    case council_room:
        -:  775:      //+4 Cards
    #####:  776:      for (i = 0; i < 4; i++)
        -:  777:	{
    #####:  778:	  drawCard(currentPlayer, state);
    #####:  779:	}
        -:  780:
        -:  781:      //+1 Buy
    #####:  782:      state->numBuys++;
        -:  783:
        -:  784:      //Each other player draws a card
    #####:  785:      for (i = 0; i < state->numPlayers; i++)
        -:  786:	{
    #####:  787:	  if ( i != currentPlayer )
        -:  788:	    {
    #####:  789:	      drawCard(i, state);
    #####:  790:	    }
    #####:  791:	}
        -:  792:
        -:  793:      //put played card in played card pile
    #####:  794:      discardCard(handPos, currentPlayer, state, 0);
        -:  795:
    #####:  796:      return 0;
        -:  797:
        -:  798:    case feast:
        -:  799:      //gain card with cost up to 5
        -:  800:      //Backup hand
    #####:  801:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  802:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  803:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  804:      }
        -:  805:      //Backup hand
        -:  806:
        -:  807:      //Update Coins for Buy
    #####:  808:      updateCoins(currentPlayer, state, 5);
    #####:  809:      x = 1;//Condition to loop on
    #####:  810:      while( x == 1) {//Buy one card
    #####:  811:	if (supplyCount(choice1, state) <= 0){
        -:  812:	  if (DEBUG)
        -:  813:	    printf("None of that card left, sorry!\n");
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  817:	  }
    #####:  818:	}
    #####:  819:	else if (state->coins < getCost(choice1)){
    #####:  820:	  printf("That card is too expensive!\n");
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  824:	  }
    #####:  825:	}
        -:  826:	else{
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  830:	  }
        -:  831:
    #####:  832:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  833:	  x = 0;//No more buying cards
        -:  834:
        -:  835:	  if (DEBUG){
        -:  836:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  837:	  }
        -:  838:
        -:  839:	}
        -:  840:      }
        -:  841:
        -:  842:      //Reset Hand
    #####:  843:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  844:	state->hand[currentPlayer][i] = temphand[i];
    #####:  845:	temphand[i] = -1;
    #####:  846:      }
        -:  847:      //Reset Hand
        -:  848:
    #####:  849:      return 0;
        -:  850:
        -:  851:    case gardens:
    #####:  852:      return -1;
        -:  853:
        -:  854:    case mine:
    #####:  855:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  856:
    #####:  857:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  858:	{
    #####:  859:	  return -1;
        -:  860:	}
        -:  861:
    #####:  862:      if (choice2 > treasure_map || choice2 < curse)
        -:  863:	{
    #####:  864:	  return -1;
        -:  865:	}
        -:  866:
    #####:  867:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:
    #####:  872:      gainCard(choice2, state, 2, currentPlayer);
        -:  873:
        -:  874:      //discard card from hand
    #####:  875:      discardCard(handPos, currentPlayer, state, 0);
        -:  876:
        -:  877:      //discard trashed card
    #####:  878:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  879:	{
    #####:  880:	  if (state->hand[currentPlayer][i] == j)
        -:  881:	    {
    #####:  882:	      discardCard(i, currentPlayer, state, 0);
    #####:  883:	      break;
        -:  884:	    }
    #####:  885:	}
        -:  886:
    #####:  887:      return 0;
        -:  888:
        -:  889:    case remodel:
    #####:  890:      return remodel_card(currentPlayer, state, handPos);
        -:  891:
        -:  892:    case smithy:
    #####:  893:      return smithy_card(currentPlayer, state, handPos);
        -:  894:
        -:  895:    case village:
        1:  896:      return village_card(currentPlayer, state, handPos);
        -:  897:
        -:  898:    case baron:
    #####:  899:      state->numBuys++;//Increase buys by 1!
    #####:  900:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  901:	int p = 0;//Iterator for hand!
    #####:  902:	int card_not_discarded = 1;//Flag for discard set!
    #####:  903:	while(card_not_discarded){
    #####:  904:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  905:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  906:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  907:	    state->discardCount[currentPlayer]++;
    #####:  908:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  909:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  910:	    }
    #####:  911:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  912:	    state->handCount[currentPlayer]--;
    #####:  913:	    card_not_discarded = 0;//Exit the loop
    #####:  914:	  }
    #####:  915:	  else if (p > state->handCount[currentPlayer]){
        -:  916:	    if(DEBUG) {
        -:  917:	      printf("No estate cards in your hand, invalid choice\n");
        -:  918:	      printf("Must gain an estate if there are any\n");
        -:  919:	    }
    #####:  920:	    if (supplyCount(estate, state) > 0){
    #####:  921:	      gainCard(estate, state, 0, currentPlayer);
    #####:  922:	      state->supplyCount[estate]--;//Decrement estates
    #####:  923:	      if (supplyCount(estate, state) == 0){
    #####:  924:		isGameOver(state);
    #####:  925:	      }
    #####:  926:	    }
    #####:  927:	    card_not_discarded = 0;//Exit the loop
    #####:  928:	  }
        -:  929:
        -:  930:	  else{
    #####:  931:	    p++;//Next card
        -:  932:	  }
        -:  933:	}
    #####:  934:      }
        -:  935:
        -:  936:      else{
    #####:  937:	if (supplyCount(estate, state) > 0){
    #####:  938:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  939:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  940:	  if (supplyCount(estate, state) == 0){
    #####:  941:	    isGameOver(state);
    #####:  942:	  }
    #####:  943:	}
        -:  944:      }
        -:  945:
        -:  946:
    #####:  947:      return 0;
        -:  948:
        -:  949:    case great_hall:
    #####:  950:      return great_hall_card(currentPlayer, state, handPos);
        -:  951:
        -:  952:    case minion:
        -:  953:      //+1 action
    #####:  954:      state->numActions++;
        -:  955:
        -:  956:      //discard card from hand
    #####:  957:      discardCard(handPos, currentPlayer, state, 0);
        -:  958:
    #####:  959:      if (choice1)		//+2 coins
        -:  960:	{
    #####:  961:	  state->coins = state->coins + 2;
    #####:  962:	}
        -:  963:
    #####:  964:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  965:	{
        -:  966:	  //discard hand
    #####:  967:	  while(numHandCards(state) > 0)
        -:  968:	    {
    #####:  969:	      discardCard(handPos, currentPlayer, state, 0);
        -:  970:	    }
        -:  971:
        -:  972:	  //draw 4
    #####:  973:	  for (i = 0; i < 4; i++)
        -:  974:	    {
    #####:  975:	      drawCard(currentPlayer, state);
    #####:  976:	    }
        -:  977:
        -:  978:	  //other players discard hand and redraw if hand size > 4
    #####:  979:	  for (i = 0; i < state->numPlayers; i++)
        -:  980:	    {
    #####:  981:	      if (i != currentPlayer)
        -:  982:		{
    #####:  983:		  if ( state->handCount[i] > 4 )
        -:  984:		    {
        -:  985:		      //discard hand
    #####:  986:		      while( state->handCount[i] > 0 )
        -:  987:			{
    #####:  988:			  discardCard(handPos, i, state, 0);
        -:  989:			}
        -:  990:
        -:  991:		      //draw 4
    #####:  992:		      for (j = 0; j < 4; j++)
        -:  993:			{
    #####:  994:			  drawCard(i, state);
    #####:  995:			}
    #####:  996:		    }
    #####:  997:		}
    #####:  998:	    }
        -:  999:
    #####: 1000:	}
    #####: 1001:      return 0;
        -: 1002:
        -: 1003:    case steward:
    #####: 1004:      if (choice1 == 1) {
        -: 1005:    	  //+2 cards
    #####: 1006:    	  drawCard(currentPlayer, state);
    #####: 1007:    	  drawCard(currentPlayer, state);
    #####: 1008:	    }
    #####: 1009:      else if (choice1 == 2) {
        -: 1010:    	  //+2 coins
    #####: 1011:    	  state->coins = state->coins + 2;
    #####: 1012:    	}
        -: 1013:      else {
        -: 1014:    	  //trash 2 cards in hand
    #####: 1015:    	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1016:    	  discardCard(choice3, currentPlayer, state, 1);
        -: 1017:	    }
        -: 1018:
        -: 1019:      //discard card from hand
    #####: 1020:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1021:      return 0;
        -: 1022:
        -: 1023:    case tribute:
    #####: 1024:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1025:	if (state->deckCount[nextPlayer] > 0){
    #####: 1026:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	  state->deckCount[nextPlayer]--;
    #####: 1028:	}
    #####: 1029:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1030:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1031:	  state->discardCount[nextPlayer]--;
    #####: 1032:	}
        -: 1033:	else{
        -: 1034:	  //No Card to Reveal
        -: 1035:	  if (DEBUG){
        -: 1036:	    printf("No cards to reveal\n");
        -: 1037:	  }
        -: 1038:	}
    #####: 1039:      }
        -: 1040:
        -: 1041:      else{
    #####: 1042:	if (state->deckCount[nextPlayer] == 0){
    #####: 1043:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1044:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1045:	    state->deckCount[nextPlayer]++;
    #####: 1046:	    state->discard[nextPlayer][i] = -1;
    #####: 1047:	    state->discardCount[nextPlayer]--;
    #####: 1048:	  }
        -: 1049:
    #####: 1050:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1051:	}
    #####: 1052:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
    #####: 1055:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1057:	state->deckCount[nextPlayer]--;
        -: 1058:      }
        -: 1059:
    #####: 1060:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1061:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1062:	state->playedCardCount++;
    #####: 1063:	tributeRevealedCards[1] = -1;
    #####: 1064:      }
        -: 1065:
    #####: 1066:      for (i = 0; i <= 2; i ++){
    #####: 1067:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1068:	  state->coins += 2;
    #####: 1069:	}
        -: 1070:
    #####: 1071:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1072:	  drawCard(currentPlayer, state);
    #####: 1073:	  drawCard(currentPlayer, state);
    #####: 1074:	}
        -: 1075:	else{//Action Card
    #####: 1076:	  state->numActions = state->numActions + 2;
        -: 1077:	}
    #####: 1078:      }
        -: 1079:
    #####: 1080:      return 0;
        -: 1081:
        -: 1082:    case ambassador:
    #####: 1083:      j = 0;		//used to check if player has enough cards to discard
        -: 1084:
    #####: 1085:      if (choice2 > 2 || choice2 < 0)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      if (choice1 == handPos)
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1096:	{
    #####: 1097:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1098:	    {
    #####: 1099:	      j++;
    #####: 1100:	    }
    #####: 1101:	}
    #####: 1102:      if (j < choice2)
        -: 1103:	{
    #####: 1104:	  return -1;
        -: 1105:	}
        -: 1106:
        -: 1107:      if (DEBUG)
        -: 1108:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1109:
        -: 1110:      //increase supply count for choosen card by amount being discarded
    #####: 1111:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1112:
        -: 1113:      //each other player gains a copy of revealed card
    #####: 1114:      for (i = 0; i < state->numPlayers; i++)
        -: 1115:	{
    #####: 1116:	  if (i != currentPlayer)
        -: 1117:	    {
    #####: 1118:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1119:	    }
    #####: 1120:	}
        -: 1121:
        -: 1122:      //discard played card from hand
    #####: 1123:      discardCard(handPos, currentPlayer, state, 0);
        -: 1124:
        -: 1125:      //trash copies of cards returned to supply
    #####: 1126:      for (j = 0; j < choice2; j++)
        -: 1127:	{
    #####: 1128:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1129:	    {
    #####: 1130:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1131:		{
    #####: 1132:		  discardCard(i, currentPlayer, state, 1);
    #####: 1133:		  break;
        -: 1134:		}
    #####: 1135:	    }
    #####: 1136:	}
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:
        -: 1140:    case cutpurse:
        -: 1141:
    #####: 1142:      updateCoins(currentPlayer, state, 2);
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
        -: 1146:	    {
    #####: 1147:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1148:		{
    #####: 1149:		  if (state->hand[i][j] == copper)
        -: 1150:		    {
    #####: 1151:		      discardCard(j, i, state, 0);
    #####: 1152:		      break;
        -: 1153:		    }
    #####: 1154:		  if (j == state->handCount[i])
        -: 1155:		    {
    #####: 1156:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1157:			{
        -: 1158:			  if (DEBUG)
        -: 1159:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1160:			}
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		}
        -: 1164:
    #####: 1165:	    }
        -: 1166:
    #####: 1167:	}
        -: 1168:
        -: 1169:      //discard played card from hand
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);
        -: 1171:
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:
        -: 1175:    case embargo:
        -: 1176:      //+2 Coins
    #####: 1177:      state->coins = state->coins + 2;
        -: 1178:
        -: 1179:      //see if selected pile is in play
    #####: 1180:      if ( state->supplyCount[choice1] == -1 )
        -: 1181:	{
    #####: 1182:	  return -1;
        -: 1183:	}
        -: 1184:
        -: 1185:      //add embargo token to selected supply pile
    #####: 1186:      state->embargoTokens[choice1]++;
        -: 1187:
        -: 1188:      //trash card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1190:      return 0;
        -: 1191:
        -: 1192:    case outpost:
    #####: 1193:      return outpost_card(currentPlayer, state, handPos);
        -: 1194:
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1205:	}
        -: 1206:
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:
    #####: 1252:  return -1;
        1: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:
        -: 1258:  //if card is not trashed, added to Played pile
        1: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
        1: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1263:      state->playedCardCount++;
        1: 1264:    }
        -: 1265:
        -: 1266:  //set played card to -1
        1: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:
        -: 1269:  //remove card from player's hand
        1: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
    #####: 1274:    }
        1: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
    #####: 1279:    }
        -: 1280:  else
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        1: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        1: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        1: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:
        1: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
    #####: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
    #####: 1312:    }
    #####: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
    #####: 1317:    }
        -: 1318:  else
        -: 1319:    {
    #####: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:
        -: 1324:  //decrease number in supply pile
    #####: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:
    #####: 1327:  return 0;
    #####: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:
        -: 1334:  //reset coin count
        1: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
       12: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
        5: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
        4: 1342:	  state->coins += 1;
        4: 1343:	}
        1: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
    #####: 1347:	}
        1: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
    #####: 1351:	}
        5: 1352:    }
        -: 1353:
        -: 1354:  //add bonus
        1: 1355:  state->coins += bonus;
        -: 1356:
        1: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
